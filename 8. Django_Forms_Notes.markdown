# Django Forms 詳細筆記

## 1. 簡介
Django Forms 是 Django 框架的重要組成部分，用於處理 HTML 表單和數據驗證。它提供了一個靈活且強大的系統來創建、渲染和處理表單數據，同時確保數據的安全性和有效性。本筆記將深入探討 Django Forms 的各個方面，幫助您全面掌握這一工具。

## 2. 表單基礎
### 2.1 什麼是 Django Forms？
- Django Forms 是一個 Python 類，用於定義表單的結構、字段和驗證規則。
- 它可以自動生成 HTML 表單元素，並處理用戶提交的數據。
- 支持數據驗證、錯誤處理和安全特性，如 CSRF 保護。

### 2.2 表單類型
- **Form**：用於創建標準表單。
- **ModelForm**：基於模型自動生成表單，適合與數據庫交互。

## 3. 創建表單
### 3.1 定義表單類
- 繼承自 `forms.Form` 或 `forms.ModelForm`。
- 定義字段，如 `CharField`、`EmailField`、`IntegerField` 等。

**示例：**
```python
from django import forms

class ContactForm(forms.Form):
    name = forms.CharField(max_length=100)
    email = forms.EmailField()
    message = forms.CharField(widget=forms.Textarea)
```

### 3.2 字段類型
Django 提供多種字段類型，每種都有特定的用途和驗證規則：
- `CharField`：文本輸入。
- `EmailField`：電子郵件地址。
- `IntegerField`：整數。
- `DateField`：日期。
- `ChoiceField`：下拉選單。
- `FileField`：文件上傳。
- 更多字段類型可參考 [官方文檔](https://docs.djangoproject.com/en/stable/ref/forms/fields/)。

### 3.3 字段選項
每個字段可以設置多種選項，如：
- `required`：是否必填（默認為 `True`）。
- `label`：字段標籤。
- `initial`：初始值。
- `widget`：渲染的 HTML 控件。
- `help_text`：幫助文本。
- `validators`：自定義驗證器。

**示例：**
```python
name = forms.CharField(
    max_length=100,
    required=True,
    label='Your Name',
    help_text='Enter your full name'
)
```

## 4. 渲染表單
### 4.1 在視圖中使用表單
- 創建表單實例。
- 將表單傳遞給模板上下文。

**示例：**
```python
from django.shortcuts import render
from .forms import ContactForm

def contact_view(request):
    form = ContactForm()
    return render(request, 'contact.html', {'form': form})
```

### 4.2 在模板中渲染表單
- 使用 `{{ form }}` 渲染整個表單。
- 或者手動渲染每個字段，如 `{{ form.name }}`。

**示例：**
```html
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Submit</button>
</form>
```

- `as_p`：將表單字段包裝在 `<p>` 標籤中。
- 其他選項：`as_ul`、`as_table`。

## 5. 處理表單提交
### 5.1 驗證表單數據
- 在視圖中檢查 `request.method == 'POST'`。
- 使用 `form.is_valid()` 驗證數據。

**示例：**
```python
if request.method == 'POST':
    form = ContactForm(request.POST)
    if form.is_valid():
        # 處理數據
        pass
    else:
        # 顯示錯誤
        pass
```

### 5.2 訪問表單數據
- 使用 `form.cleaned_data` 獲取驗證後的數據。

**示例：**
```python
name = form.cleaned_data['name']
email = form.cleaned_data['email']
message = form.cleaned_data['message']
```

## 6. ModelForm
### 6.1 定義 ModelForm
- 基於模型自動生成表單。
- 繼承自 `forms.ModelForm`。
- 指定 `model` 和 `fields`。

**示例：**
```python
from django import forms
from .models import Book

class BookForm(forms.ModelForm):
    class Meta:
        model = Book
        fields = ['title', 'author', 'published_date']
```

### 6.2 保存數據
- 使用 `form.save()` 將數據保存到數據庫。

**示例：**
```python
if form.is_valid():
    form.save()
```

## 7. 表單驗證
### 7.1 內置驗證
- 每個字段類型都有默認的驗證規則。
- 例如，`EmailField` 驗證電子郵件格式。

### 7.2 自定義驗證
- 在表單類中定義 `clean_<field>()` 方法。
- 或定義 `clean()` 方法進行整體驗證。

**示例：**
```python
def clean_name(self):
    name = self.cleaned_data['name']
    if len(name) < 3:
        raise forms.ValidationError("Name must be at least 3 characters.")
    return name
```

## 8. 表單小部件（Widgets）
- 控制字段的 HTML 渲染。
- 例如，`forms.Textarea` 用於多行文本輸入。

**示例：**
```python
message = forms.CharField(widget=forms.Textarea(attrs={'rows': 5, 'cols': 40}))
```

## 9. 表單集（Formsets）
- 用於處理多個表單實例。
- 例如，同時創建多個書籍。

**示例：**
```python
from django.forms import formset_factory

BookFormSet = formset_factory(BookForm, extra=2)
```

## 10. 安全性
- **CSRF 保護**：在表單中包含 `{% csrf_token %}`。
- **防止惡意輸入**：Django Forms 自動轉義輸出，防止 XSS 攻擊。

## 11. 最佳實踐
- **保持表單簡單**：將複雜邏輯移至視圖或模型。
- **重用表單**：利用繼承和 mixin 創建可重用表單。
- **自定義錯誤消息**：提供有意義的錯誤提示。
- **使用 crispy-forms**：改善表單渲染和佈局。

## 12. 結語
Django Forms 提供了一個強大而靈活的工具來處理 Web 應用程式中的表單。通過掌握表單的創建、渲染、驗證和處理，您可以構建安全、高效且用戶友好的 Web 表單。建議結合實踐和 [Django 官方文檔](https://docs.djangoproject.com/en/stable/topics/forms/) 深入學習。