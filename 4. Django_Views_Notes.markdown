# Django Views 詳細筆記（繁體中文翻譯）

## 1. 介紹
- Django Views 是 Django 框架的核心組件，負責處理 HTTP 請求並返回 HTTP 回應。
- Views 在 MVC（模型-視圖-控制器）架構中扮演控制器的角色，連接模型（資料）與模板（呈現）。
- 本筆記為初學者提供全面指南，幫助理解並掌握 Django Views 的基礎、類型、用法及最佳實踐。

## 2. Views 的基本概念
- **定義**：View 是一個 Python 函式或類別，接收 HTTP 請求並返回 HTTP 回應。
- **目的**：
  - 處理用戶請求。
  - 與模型互動以取得或修改資料。
  - 渲染模板產生 HTML 頁面。
  - 以 JSON 或 XML 等格式返回資料。
- **位置**：通常位於 Django 應用程式的 `views.py` 檔案中，但也可拆分於多個檔案。

## 3. 基於函式的 View（FBV）
- **定義**：以 Python 函式定義的 View。
- **優點**：
  - 簡單直觀，易於撰寫與理解。
  - 適合小型專案或邏輯簡單的情境。
- **範例**：
  ```python
  from django.http import HttpResponse

  def hello_world(request):
      return HttpResponse("Hello, World!")
  ```
- **Request 物件（`request`）**：
  - 包含 HTTP 請求的中繼資料（如方法：GET/POST、用戶代理、IP 位址等）。
  - 以 `request.GET` 取得查詢參數，`request.POST` 取得表單資料。
- **回應選項**：
  - `HttpResponse`：返回純文字或 HTML。
  - `JsonResponse`：返回 JSON 資料。
  - `render`：渲染模板並返回 HTML。
  - `redirect`：重定向至其他 URL。

## 4. 基於類別的 View（CBV）
- **定義**：以 Python 類別定義的 View。
- **優點**：
  - 透過繼承與 mixin 提高程式碼重用性。
  - 適合複雜邏輯與大型專案。
- **基本結構**：
  ```python
  from django.views import View
  from django.http import HttpResponse

  class HelloWorldView(View):
      def get(self, request):
          return HttpResponse("Hello, World!")
  ```
- **常用 CBV**：
  - `View`：基礎類別，需手動處理 HTTP 方法。
  - `TemplateView`：渲染指定模板。
  - `ListView`：顯示物件列表。
  - `DetailView`：顯示單一物件詳情。
  - `CreateView`、`UpdateView`、`DeleteView`：處理建立、更新、刪除物件的表單提交。
- **HTTP 方法對應**：
  - `get()`：處理 GET 請求。
  - `post()`：處理 POST 請求。
  - `put()`、`delete()` 等：處理相應 HTTP 方法。

## 5. URL 路由
- **定義**：將 URL 映射至對應的 View。
- **設定**：在 `urls.py` 檔案中定義。
- **範例**：
  ```python
  from django.urls import path
  from .views import hello_world, HelloWorldView

  urlpatterns = [
      path('hello/', hello_world),
      path('hello-class/', HelloWorldView.as_view()),
  ]
  ```
- **URL 參數**：
  - 位置參數：`path('book/<int:book_id>/', book_detail)`
  - 命名參數：`path('book/<int:book_id>/', book_detail, name='book_detail')`

## 6. View 中的模板渲染
- **`render` 函式**：
  - 渲染模板並返回 `HttpResponse`。
  - 語法：`render(request, template_name, context)`
  - **範例**：
    ```python
    from django.shortcuts import render

    def book_list(request):
        books = Book.objects.all()
        return render(request, 'book_list.html', {'books': books})
    ```
- **模板繼承**：
  - 使用 `{% extends "base.html" %}` 繼承基礎模板。
  - 使用 `{% block %}` 定義可覆寫區塊。

## 7. 表單處理
- **GET 請求**：通常用於顯示表單。
- **POST 請求**：用於提交表單資料。
- **範例**：
  ```python
  from django.shortcuts import render, redirect
  from .forms import BookForm

  def create_book(request):
      if request.method == 'POST':
          form = BookForm(request.POST)
          if form.is_valid():
              form.save()
              return redirect('book_list')
      else:
          form = BookForm()
      return render(request, 'create_book.html', {'form': form})
  ```
- **表單驗證**：
  - 使用 Django 的 `Form` 類別進行驗證。
  - `form.is_valid()` 檢查表單資料是否有效。

## 8. View 中的資料查詢
- **ORM 查詢**：
  - 使用 Django ORM 進行資料庫操作。
  - **範例**：
    ```python
    books = Book.objects.filter(author='John Doe').order_by('-publish_date')
    ```
- **QuerySet**：
  - 支援鏈式操作與延遲評估。
  - 方法包括 `filter()`、`exclude()`、`get()`、`all()`。

## 9. 認證與授權
- **登入驗證**：
  - 使用 `@login_required` 裝飾器限制存取。
  - **範例**：
    ```python
    from django.contrib.auth.decorators import login_required

    @login_required
    def my_view(request):
        pass
    ```
- **權限檢查**：
  - 使用 `@permission_required` 裝飾器。
  - **範例**：
    ```python
    from django.contrib.auth.decorators import permission_required

    @permission_required('app.change_book')
    def edit_book(request, book_id):
        pass
    ```

## 10. View 中的錯誤處理
- **404 錯誤**：
  - 當找不到物件時使用 `get_object_or_404`。
  - **範例**：
    ```python
    from django.shortcuts import get_object_or_404

    def book_detail(request, book_id):
        book = get_object_or_404(Book, pk=book_id)
        return render(request, 'book_detail.html', {'book': book})
    ```
- **500 錯誤**：
  - Django 會自動處理伺服器錯誤，但可自訂錯誤頁面。
  - 在 `urls.py` 設定：
    ```python
    handler500 = 'myapp.views.server_error'
    ```

## 11. View 的快取
- **快取 View**：
  - 使用 `@cache_page` 裝飾器快取 View 輸出。
  - **範例**：
    ```python
    from django.views.decorators.cache import cache_page

    @cache_page(60 * 15)  # 快取 15 分鐘
    def my_view(request):
        pass
    ```
- **快取控制**：
  - 使用 `cache_control` 裝飾器設定快取標頭。

## 12. View 的國際化
- **翻譯**：
  - 使用 `gettext` 標記需翻譯字串。
  - **範例**：
    ```python
    from django.utils.translation import gettext as _

    def my_view(request):
        message = _('Hello, World!')
        return HttpResponse(message)
    ```
- **語言切換**：
  - Django 支援透過 URL 或 session 設定切換語言。

## 13. View 的非同步支援
- **Django 3.1+**：
  - 支援以 `async def` 定義非同步 View。
  - **範例**：
    ```python
    from django.http import HttpResponse

    async def async_view(request):
        return HttpResponse("Async Hello, World!")
    ```
- **注意**：需 Django 3.1+ 及 ASGI 伺服器。

## 14. 最佳實踐
- **保持 View 簡潔**：
  - 複雜邏輯應移至模型、表單或服務層。
- **優先使用 CBV**：
  - 複雜邏輯與程式碼重用建議使用 CBV。
- **妥善處理錯誤**：
  - 務必考慮例外與邊界情境。
- **安全性**：
  - 善用 Django 內建功能防範 CSRF、XSS 等（如謹慎使用 `csrf_exempt`）。

## 15. 結論
- Django Views 是建構網頁應用的關鍵，熟練掌握有助於開發高效且安全的 Django 專案。
- 本筆記提供系統化學習路徑，協助初學者將 Django Views 應用於實務專案。
- 建議結合官方文件與實作練習以深化理解。