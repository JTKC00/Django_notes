# Django Deployment 詳細筆記

## 1. Django Deployment 簡介
- Django Deployment 是將 Django 應用程式部署到伺服器上，使其可通過網際網路訪問。
- 關鍵考量包括安全性、效能、可擴展性和可維護性。

## 2. 選擇託管服務提供商
- **選項**：
  - **VPS（虛擬私人伺服器）**：如 DigitalOcean、Linode 或 AWS EC2。
  - **PaaS（平台即服務）**：如 Heroku、PythonAnywhere 或 Google App Engine。
- **選擇時的考量**：
  - 成本
  - 可擴展性
  - 易用性
  - 應用程式的特定需求

## 3. 設置伺服器
### 3.1 VPS 設置
- **安裝軟體**：
  - Python
  - Django
  - Web 伺服器（如 Nginx 或 Apache）
  - 資料庫（如 PostgreSQL 或 MySQL）
  - 其他依賴項
- **安全配置**：
  - 設置防火牆規則
  - 創建非 root 用戶
  - 配置 SSH 訪問

### 3.2 PaaS 設置
- 根據提供商的文檔進行設置。
- PaaS 通常簡化伺服器配置，適合快速部署。

## 4. 為生產環境配置 Django
### 4.1 Settings 配置
- **`DEBUG`**：設為 `False`，避免洩漏敏感信息。
- **`ALLOWED_HOSTS`**：加入您的域名或 IP 地址。
- **敏感設置**：使用環境變數管理 `SECRET_KEY` 和資料庫憑證等。

### 4.2 資料庫配置
- 使用生產級資料庫（如 PostgreSQL 或 MySQL），避免使用 SQLite。
- 在 `settings.py` 中配置資料庫連接。

### 4.3 靜態文件和媒體文件
- **設置**：
  - 配置 `STATIC_ROOT` 用於收集靜態文件。
  - 配置 `MEDIA_ROOT` 用於處理用戶上傳的媒體文件。
- **伺服**：使用 Web 伺服器或雲服務（如 AWS S3）提供文件。

## 5. Web 伺服器配置
### 5.1 Gunicorn
- **用途**：運行 Django 應用程式的 WSGI 伺服器。
- **配置**：
  - 安裝 Gunicorn。
  - 運行命令：`gunicorn myproject.wsgi:application --bind 0.0.0.0:8000`

### 5.2 Nginx
- **用途**：作為反向代理並提供靜態文件。
- **配置示例**：
  ```
  server {
      listen 80;
      server_name yourdomain.com;

      location / {
          proxy_pass http://127.0.0.1:8000;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
      }

      location /static/ {
          alias /path/to/static/files;
      }

      location /media/ {
          alias /path/to/media/files;
      }
  }
  ```

## 6. 安全性考量
### 6.1 SSL/TLS
- 使用 HTTPS 加密數據傳輸。
- 從 Let's Encrypt 獲取 SSL 證書並配置到 Web 伺服器。

### 6.2 資料庫安全
- 使用強密碼並限制訪問權限。
- 定期備份資料庫。

### 6.3 應用程式安全
- 保持 Django 和依賴項更新。
- 利用 Django 內置的安全功能（如 CSRF 和 XSS 保護）。

## 7. 效能優化
- **緩存**：使用 Redis 或 Memcached 緩存視圖或查詢。
- **資料庫優化**：添加索引並優化查詢。
- **負載均衡**：高流量時使用負載均衡器分發請求。

## 8. 監控和日誌
- 設置日誌監控錯誤和效能。
- 使用工具如 Sentry（錯誤追蹤）或 New Relic（效能監控）。

## 9. 自動化部署
- 使用 Ansible、Docker 或 CI/CD 工具（如 GitHub Actions）簡化部署流程。

## 10. 備份和恢復
- 定期備份資料庫和媒體文件。
- 測試恢復流程以確保數據完整性。

## 11. 結論
- Django 部署需謹慎規劃，確保安全性、效能和可擴展性。
- 定期檢查和更新部署配置以遵循最佳實踐。