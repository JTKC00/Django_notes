# Django REST Framework (DRF) 詳細筆記

## 介紹 (Introduction)

Django REST Framework (DRF) 是一個強大的工具包，用於在Django框架中構建Web APIs。它提供了一系列的工具和類別，讓開發者能夠輕鬆創建RESTful APIs，包括序列化 (serialization)、視圖 (views)、認證 (authentication)、權限 (permissions) 等功能。DRF 的優勢在於其模組化設計、易於擴展，以及對瀏覽器API瀏覽 (browsable API) 的支援，讓開發和測試變得更直觀。

為什麼使用DRF？
- 支援RESTful原則：如HTTP方法 (GET, POST, PUT, DELETE)。
- 自動生成API文檔 (documentation)。
- 內建的序列化和驗證 (validation)。
- 與Django的ORM無縫整合。

## 安裝和設置 (Installation and Setup)

1. **安裝DRF**：
   使用pip安裝：
   ```
   pip install djangorestframework
   ```

2. **添加到Django項目**：
   在`settings.py`的`INSTALLED_APPS`中添加`'rest_framework'`：
   ```python
   INSTALLED_APPS = [
       # ... 其他app
       'rest_framework',
   ]
   ```

3. **基本配置**：
   在`settings.py`中設定REST框架的預設行為，例如：
   ```python
   REST_FRAMEWORK = {
       'DEFAULT_AUTHENTICATION_CLASSES': [
           'rest_framework.authentication.BasicAuthentication',
           'rest_framework.authentication.SessionAuthentication',
       ],
       'DEFAULT_PERMISSION_CLASSES': [
           'rest_framework.permissions.IsAuthenticated',
       ],
   }
   ```
   這設定了預設的認證和權限類別。

## 序列化器 (Serializers)

序列化器負責將Django模型 (models) 轉換為JSON或其他格式，並處理輸入驗證。

### 基本序列化器 (Serializer)
```python
from rest_framework import serializers
from .models import Book  # 假設有一個Book模型

class BookSerializer(serializers.Serializer):
    id = serializers.IntegerField(read_only=True)
    title = serializers.CharField(max_length=100)
    author = serializers.CharField(max_length=100)

    def create(self, validated_data):
        return Book.objects.create(**validated_data)

    def update(self, instance, validated_data):
        instance.title = validated_data.get('title', instance.title)
        instance.author = validated_data.get('author', instance.author)
        instance.save()
        return instance
```
**解釋**：這是一個手動定義的序列化器。`create`和`update`方法處理資料的建立和更新。

### 模型序列化器 (ModelSerializer)
更方便的方式，使用`ModelSerializer`自動生成欄位：
```python
class BookSerializer(serializers.ModelSerializer):
    class Meta:
        model = Book
        fields = ['id', 'title', 'author']
```
**解釋**：`ModelSerializer`自動從模型中推斷欄位，並提供預設的`create`和`update`方法。適合大多數情況。

### 嵌套序列化 (Nested Serializers)
如果模型有關係 (relations)，如ForeignKey：
```python
class AuthorSerializer(serializers.ModelSerializer):
    class Meta:
        model = Author
        fields = ['id', 'name']

class BookSerializer(serializers.ModelSerializer):
    author = AuthorSerializer()  # 嵌套

    class Meta:
        model = Book
        fields = ['id', 'title', 'author']
```
**解釋**：這允許在API回應中包含嵌套的相關物件資料。

## 視圖 (Views)

DRF提供多種視圖類別，從基本到進階。

### APIView
基本視圖類別，處理HTTP方法：
```python
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status

class BookList(APIView):
    def get(self, request):
        books = Book.objects.all()
        serializer = BookSerializer(books, many=True)
        return Response(serializer.data)

    def post(self, request):
        serializer = BookSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
```
**解釋**：`get`處理列表查詢，`post`處理建立。使用`Response`返回資料。

### 泛型視圖 (Generic Views)
更簡潔的視圖，內建CRUD操作：
```python
from rest_framework import generics

class BookListCreate(generics.ListCreateAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer

class BookDetail(generics.RetrieveUpdateDestroyAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
```
**解釋**：`ListCreateAPIView`處理GET (列表) 和POST (建立)；`RetrieveUpdateDestroyAPIView`處理GET (單一)、PUT/PATCH (更新)、DELETE (刪除)。

### 視圖集 (ViewSets)
將多個視圖合併為一個類別：
```python
from rest_framework import viewsets

class BookViewSet(viewsets.ModelViewSet):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
```
**解釋**：`ModelViewSet`自動提供完整的CRUD操作。適合Router使用。

## 路由和URL (Routers and URLs)

使用Router自動生成URL：
```python
from rest_framework.routers import DefaultRouter
from .views import BookViewSet

router = DefaultRouter()
router.register(r'books', BookViewSet)

urlpatterns = [
    path('', include(router.urls)),
]
```
**解釋**：這會生成如`/books/` (列表/建立) 和`/books/{id}/` (單一操作) 的URL模式。

## 認證和權限 (Authentication and Permissions)

### 認證 (Authentication)
DRF支援多種認證方式，如Token、JWT等。
**範例**：使用TokenAuthentication。
在`settings.py`添加：
```python
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
}
```
生成Token：
```python
from rest_framework.authtoken.models import Token
token = Token.objects.create(user=user)
```
**解釋**：客戶端在請求頭中帶`Authorization: Token <token>`。

### 權限 (Permissions)
控制誰能訪問API。
**範例**：僅允許認證用戶：
```python
from rest_framework.permissions import IsAuthenticated

class BookViewSet(viewsets.ModelViewSet):
    permission_classes = [IsAuthenticated]
```
自訂權限：
```python
from rest_framework.permissions import BasePermission

class IsOwnerOrReadOnly(BasePermission):
    def has_object_permission(self, request, view, obj):
        if request.method in SAFE_METHODS:
            return True
        return obj.owner == request.user
```
**解釋**：`SAFE_METHODS`包括GET、HEAD、OPTIONS。僅擁有者可修改。

## 分頁 (Pagination)

自動分頁大型資料集。
在`settings.py`：
```python
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}
```
**解釋**：API回應將包含`next`、`previous`連結和`count`。客戶端使用`?page=2`查詢。

## 過濾和搜尋 (Filtering and Searching)

### 基本過濾
使用`django-filter`整合。
安裝：`pip install django-filter`
在`settings.py`：
```python
INSTALLED_APPS = ['django_filters']
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}
```
在視圖：
```python
class BookList(generics.ListAPIView):
    queryset = Book.objects.all()
    serializer_class = BookSerializer
    filterset_fields = ['author', 'title']
```
**解釋**：支援如`?author=John`的查詢。

### 搜尋
添加搜尋後端：
```python
REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['rest_framework.filters.SearchFilter'],
}
```
在視圖：
```python
search_fields = ['title', 'author']
```
**解釋**：使用`?search=keyword`進行全文搜尋。

## 測試 (Testing)

DRF提供`APITestCase`和`APIClient`。
**範例測試**：
```python
from rest_framework.test import APITestCase, APIClient
from rest_framework import status

class BookAPITest(APITestCase):
    def setUp(self):
        self.client = APIClient()
        self.book = Book.objects.create(title='Test Book', author='Test Author')

    def test_get_books(self):
        response = self.client.get('/books/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(len(response.data), 1)
```
**解釋**：`setUp`設定測試環境，測試GET請求的回應碼和資料。

## 完整範例：簡單的圖書API (Complete Example: Simple Book API)

假設模型 (`models.py`)：
```python
from django.db import models

class Book(models.Model):
    title = models.CharField(max_length=100)
    author = models.CharField(max_length=100)
```

序列化器 (`serializers.py`)：如上ModelSerializer。

視圖 (`views.py`)：使用ViewSet。

URL (`urls.py`)：使用Router。

啟動伺服器：`python manage.py runserver`，訪問`http://127.0.0.1:8000/books/`測試API。

**解釋**：這是一個完整的CRUD API。使用Postman或瀏覽器測試POST請求等。

## 進階主題 (Advanced Topics)

- **版本控制 (Versioning)**：支援URL或Header版本，如`?version=1.0`。
- **快取 (Caching)**：整合Django快取框架。
- **限流 (Throttling)**：控制請求速率，避免濫用。
- **文件生成 (Documentation)**：使用`drf-spectacular`或內建browsable API。

**建議**：閱讀官方文件 (https://www.django-rest-framework.org/) 以深入學習。練習時，從簡單模型開始，逐步添加功能。