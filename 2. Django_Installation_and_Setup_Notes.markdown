# Django 安裝和設置詳細筆記

## 1. 引言
Django 是一個基於 Python 的高級 Web 框架，以其高效、安全和可擴展性聞名，廣泛應用於 Web 開發中。本筆記旨在幫助初學者快速掌握 Django 的安裝與設置流程，為後續開發奠定基礎。

## 2. 環境準備
### Python 安裝
- 確保系統已安裝 Python 3.6 或更高版本。
- 在終端輸入以下命令檢查版本：
  ```
  python --version
  ```

### 虛擬環境
- 虛擬環境用於隔離項目依賴，避免版本衝突。
- 創建虛擬環境：
  ```
  python -m venv myenv
  ```
- 激活虛擬環境：
  - Windows:
    ```
    myenv\Scripts\activate
    ```
  - macOS/Linux:
    ```
    source myenv/bin/activate
    ```

## 3. 安裝 Django
- 使用 pip 安裝 Django：
  ```
  pip install django
  ```
- 確認安裝成功並檢查版本：
  ```
  django-admin --version
  ```

## 4. 創建 Django 項目
- 創建新項目：
  ```
  django-admin startproject projectname
  ```
- **項目目錄結構說明**：
  - `manage.py`：項目管理的命令行工具。
  - `projectname/`：項目配置目錄，包含：
    - `__init__.py`：標識該目錄為 Python 包。
    - `settings.py`：項目配置文件。
    - `urls.py`：URL 路由配置文件。
    - `asgi.py` 和 `wsgi.py`：用於部署的接口文件。

## 5. 運行開發服務器
- 進入項目目錄：
  ```
  cd projectname
  ```
- 啟動開發服務器：
  ```
  python manage.py runserver
  ```
- 在瀏覽器中訪問 `http://127.0.0.1:8000/`，確認服務器正常運行。

## 6. 創建 Django 應用
- **應用與項目的區別**：項目是配置和應用的總集合，應用是實現具體功能的模塊。
- 創建應用：
  ```
  python manage.py startapp appname
  ```
- **應用目錄結構**：
  - `migrations/`：存放數據庫遷移文件。
  - `admin.py`：配置管理員界面。
  - `apps.py`：應用配置文件。
  - `models.py`：定義數據模型。
  - `tests.py`：編寫測試代碼。
  - `views.py`：處理視圖邏輯。

## 7. 配置應用
- 打開 `settings.py`，在 `INSTALLED_APPS` 列表中添加應用：
  ```python
  INSTALLED_APPS = [
      ...
      'appname',
  ]
  ```
- **重要性**：此步驟讓 Django 識別並加載你的應用。

## 8. 數據庫設置
- Django 默認使用 SQLite，無需額外配置。
- 若使用其他數據庫（如 PostgreSQL 或 MySQL）：
  - 修改 `settings.py` 中的 `DATABASES` 配置，例如：
    ```python
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'mydatabase',
            'USER': 'myuser',
            'PASSWORD': 'mypassword',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
    ```
  - 安裝對應驅動，例如：
    ```
    pip install psycopg2
    ```

## 9. 創建和管理數據庫遷移
- 生成遷移文件：
  ```
  python manage.py makemigrations
  ```
- 應用遷移到數據庫：
  ```
  python manage.py migrate
  ```
- **作用**：將模型的變更同步到數據庫結構中。

## 10. 創建超級用戶
- 創建管理員帳戶：
  ```
  python manage.py createsuperuser
  ```
- 按提示輸入用戶名、郵箱和密碼。
- 訪問管理員界面：`http://127.0.0.1:8000/admin/`。

## 11. 靜態文件和媒體文件設置
### 靜態文件
- 在 `settings.py` 中配置：
  ```python
  STATIC_URL = '/static/'
  STATICFILES_DIRS = [BASE_DIR / "static"]
  ```
- 在模板中加載靜態文件：
  ```html
  {% load static %}
  <img src="{% static 'images/example.jpg' %}" alt="Example">
  ```

### 媒體文件
- 在 `settings.py` 中設置：
  ```python
  MEDIA_URL = '/media/'
  MEDIA_ROOT = BASE_DIR / "media"
  ```
- 在 `urls.py` 中添加：
  ```python
  from django.conf import settings
  from django.conf.urls.static import static

  urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
  ```

## 12. 國際化和本地化
- 在 `settings.py` 中配置：
  ```python
  LANGUAGE_CODE = 'zh-hant'  # 繁體中文 /'en-us' English
  TIME_ZONE = 'Asia//Hong_Kong'
  USE_I18N = True
  USE_TZ = True
  ```

## 13. 安全性設置
- **SECRET_KEY**：保持機密，勿公開。
- 開發環境：
  ```python
  DEBUG = True
  ALLOWED_HOSTS = []
  ```
- 生產環境：
  ```python
  DEBUG = False
  ALLOWED_HOSTS = ['yourdomain.com', '127.0.0.1']
  ```

