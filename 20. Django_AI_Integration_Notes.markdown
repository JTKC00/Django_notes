# Django AI Integration Notes

## 課程目標
- 理解如何在 Django 應用中整合 AI 功能（如文本生成、情感分析）。
- 學會使用 xAI 的 API（如 Grok）與開源 AI 模型（如 Hugging Face Transformers）。
- 掌握 AI 整合的流程，包括 API 呼叫、模型部署與前端呈現。
- 提供實用範例與問題解析，幫助學員將 AI 應用於實際 Django 專案。

## 筆記結構
1. **Django 與 AI 整合簡介**
2. **AI 整合的工作原理**
3. **環境設置與工具**
4. **實戰範例：使用 xAI API 實現聊天功能**
5. **實戰範例：使用 Hugging Face 進行情感分析**
6. **進階技巧與最佳實踐**
7. **常見問題與解決方案**
8. **學習資源與練習建議**

---

## 1. Django 與 AI 整合簡介

### 什麼是 Django AI 整合？
- **定義**：Django AI 整合是指在 Django 應用中嵌入 AI 功能，透過 API 或本地模型實現文本生成、圖片處理、自然語言處理（NLP）等任務。
- **常見應用場景**：
  - 聊天機器人（如基於 Grok 的問答系統）。
  - 情感分析（分析用戶評論的情感傾向）。
  - 內容生成（自動生成文章或摘要）。
  - 推薦系統（基於用戶行為的個性化推薦）。

### 為什麼在 Django 中整合 AI？
- **高效開發**：Django 提供強大的後端框架，簡化 API 呼叫與資料處理。
- **靈活性**：支援多種 AI 工具（xAI API、Hugging Face、OpenAI 等）。
- **用戶體驗**：結合 Django 的模板與視圖，輕鬆實現交互式 AI 介面。
- **可擴展性**：Django 的 ORM 與快取機制支援大規模 AI 應用。

### 選擇 AI 工具
- **xAI API**：如 Grok，提供高效的文本生成與問答功能，適合快速整合。
- **Hugging Face Transformers**：開源模型庫，支援本地部署，適合自定義需求。
- **其他選項**：OpenAI GPT、Google Cloud AI、AWS SageMaker（視專案需求）。

---

## 2. AI 整合的工作原理

### 核心流程
1. **前端交互**：用戶透過 Django 模板提交輸入（如問題、文本）。
2. **後端處理**：Django 視圖接收請求，呼叫 AI API 或本地模型進行處理。
3. **AI 推理**：API 或模型生成結果（如回答、情感分數）。
4. **回應呈現**：Django 將結果渲染到模板或以 JSON 格式返回。

### 技術架構
- **前端**：HTML 表單、JavaScript（可選，支援非同步請求）。
- **後端**：Django 視圖、ORM（儲存 AI 結果）、HTTP 客戶端（如 `requests`）。
- **AI 服務**：外部 API（如 xAI）或本地模型（如 Transformers）。
- **資料庫**：儲存用戶輸入、AI 輸出或模型元數據。

### 關鍵組件
- **API 客戶端**：如 `requests` 或 `httpx`，用於呼叫 xAI API。
- **模型庫**：如 `transformers`，用於本地模型推理。
- **環境管理**：虛擬環境與依賴管理（`pip`、`venv`）。
- **安全機制**：API 金鑰儲存、CSRF 防護。

---

## 3. 環境設置與工具

### 設置 Django 環境
1. **創建專案**：
   ```bash
   django-admin startproject ai_project
   cd ai_project
   python manage.py startapp ai_app
   ```
2. **安裝依賴**：
   ```bash
   pip install django requests httpx transformers torch
   ```
   - `requests`/`httpx`：用於 API 呼叫。
   - `transformers`/`torch`：用於 Hugging Face 模型。

3. **配置應用**：
   在 `settings.py` 中添加 `ai_app`：
   ```python
   INSTALLED_APPS = [
       ...,
       'ai_app',
   ]
   ```

### 設置 xAI API
- **註冊與金鑰**：訪問 https://x.ai/api，註冊並獲取 API 金鑰。
- **儲存金鑰**：使用環境變數儲存金鑰，避免硬編碼。
  ```bash
  # .env
  XAI_API_KEY=your-api-key
  ```
  ```python
  # settings.py
  import os
  XAI_API_KEY = os.getenv('XAI_API_KEY')
  ```

### 設置 Hugging Face
- **安裝 Transformers**：
  ```bash
  pip install transformers
  ```
- **硬體要求**：本地模型可能需要 GPU（可選），CPU 亦可運行小型模型。
- **下載模型**：Hugging Face 會自動下載模型（首次運行）。

---

## 4. 實戰範例：使用 xAI API 實現聊天功能

### 目標
創建一個簡單的聊天介面，用戶輸入問題，後端呼叫 xAI API（假設為 Grok）生成回答，並顯示在頁面。

### 步驟

1. **創建模型** (`ai_app/models.py`)：
   ```python
   from django.db import models

   class ChatMessage(models.Model):
       user_input = models.TextField()
       ai_response = models.TextField()
       created_at = models.DateTimeField(auto_now_add=True)

       def __str__(self):
           return f"{self.user_input[:50]}..."
   ```
   - 運行遷移：
     ```bash
     python manage.py makemigrations
     python manage.py migrate
     ```

2. **創建視圖** (`ai_app/views.py`)：
   ```python
   import requests
   from django.shortcuts import render
   from django.conf import settings
   from .models import ChatMessage

   def chat_view(request):
       if request.method == 'POST':
           user_input = request.POST.get('user_input')
           # 呼叫 xAI API（假設端點）
           headers = {'Authorization': f'Bearer {settings.XAI_API_KEY}'}
           data = {'prompt': user_input, 'max_tokens': 100}
           response = requests.post('https://api.x.ai/grok', json=data, headers=headers)
           
           if response.status_code == 200:
               ai_response = response.json().get('response', 'No response')
               ChatMessage.objects.create(user_input=user_input, ai_response=ai_response)
           else:
               ai_response = 'Error: Unable to get response from AI'
           
           return render(request, 'ai_app/chat.html', {
               'user_input': user_input,
               'ai_response': ai_response,
               'messages': ChatMessage.objects.all()
           })
       return render(request, 'ai_app/chat.html', {'messages': ChatMessage.objects.all()})
   ```

3. **創建模板** (`ai_app/templates/ai_app/chat.html`)：
   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>AI Chat</title>
       <style>
           .chat-box { max-width: 600px; margin: 20px auto; }
           .message { margin: 10px; padding: 10px; border: 1px solid #ccc; }
       </style>
   </head>
   <body>
       <div class="chat-box">
           <h1>Chat with AI</h1>
           <form method="post">
               {% csrf_token %}
               <input type="text" name="user_input" placeholder="Ask something..." required>
               <button type="submit">Send</button>
           </form>
           {% if user_input %}
               <div class="message">
                   <strong>You:</strong> {{ user_input }}<br>
                   <strong>AI:</strong> {{ ai_response }}
               </div>
           {% endif %}
           <h2>Chat History</h2>
           {% for message in messages %}
               <div class="message">
                   <strong>You:</strong> {{ message.user_input }}<br>
                   <strong>AI:</strong> {{ message.ai_response }}<br>
                   <small>{{ message.created_at }}</small>
               </div>
           {% endfor %}
       </div>
   </body>
   </html>
   ```

4. **配置 URL** (`ai_app/urls.py`)：
   ```python
   from django.urls import path
   from . import views

   urlpatterns = [
       path('chat/', views.chat_view, name='chat_view'),
   ]
   ```
   - 在專案 `urls.py` 中包含：
     ```python
     from django.urls import path, include

     urlpatterns = [
         path('ai/', include('ai_app.urls')),
     ]
     ```

5. **測試**：
   - 運行 `python manage.py runserver`。
   - 訪問 `http://127.0.0.1:8000/ai/chat/`，輸入問題並檢查 AI 回應。

### 說明
- **功能**：用戶輸入問題，後端呼叫 xAI API 生成回答，儲存對話記錄並顯示歷史訊息。
- **安全**：使用環境變數儲存 API 金鑰，表單包含 CSRF 令牌。
- **擴展**：可添加非同步請求（使用 JavaScript）或支援多輪對話。

---

## 5. 實戰範例：使用 Hugging Face 進行情感分析

### 目標
創建一個情感分析介面，用戶輸入文本，後端使用 Hugging Face 的情感分析模型判斷情感（正面/負面），並儲存結果。

### 步驟

1. **創建模型** (`ai_app/models.py`)：
   ```python
   from django.db import models

   class SentimentAnalysis(models.Model):
       text = models.TextField()
       sentiment = models.CharField(max_length=50)
       score = models.FloatField()
       created_at = models.DateTimeField(auto_now_add=True)

       def __str__(self):
           return f"{self.text[:50]}... ({self.sentiment})"
   ```
   - 運行遷移：
     ```bash
     python manage.py makemigrations
     python manage.py migrate
     ```

2. **創建視圖** (`ai_app/views.py`)：
   ```python
   from django.shortcuts import render
   from transformers import pipeline
   from .models import SentimentAnalysis

   def sentiment_view(request):
       # 初始化情感分析模型（僅首次載入）
       sentiment_analyzer = pipeline('sentiment-analysis')
       
       if request.method == 'POST':
           text = request.POST.get('text')
           result = sentiment_analyzer(text)[0]
           sentiment = result['label']
           score = result['score']
           
           SentimentAnalysis.objects.create(
               text=text,
               sentiment=sentiment,
               score=score
           )
           
           return render(request, 'ai_app/sentiment.html', {
               'text': text,
               'sentiment': sentiment,
               'score': score,
               'analyses': SentimentAnalysis.objects.all()
           })
       return render(request, 'ai_app/sentiment.html', {
           'analyses': SentimentAnalysis.objects.all()
       })
   ```

3. **創建模板** (`ai_app/templates/ai_app/sentiment.html`)：
   ```html
   <!DOCTYPE html>
   <html>
   <head>
       <title>Sentiment Analysis</title>
       <style>
           .analysis-box { max-width: 600px; margin: 20px auto; }
           .result { margin: 10px; padding: 10px; border: 1px solid #ccc; }
       </style>
   </head>
   <body>
       <div class="analysis-box">
           <h1>Sentiment Analysis</h1>
           <form method="post">
               {% csrf_token %}
               <textarea name="text" placeholder="Enter text to analyze..." required></textarea>
               <button type="submit">Analyze</button>
           </form>
           {% if text %}
               <div class="result">
                   <strong>Text:</strong> {{ text }}<br>
                   <strong>Sentiment:</strong> {{ sentiment }} (Score: {{ score|floatformat:2 }})
               </div>
           {% endif %}
           <h2>Analysis History</h2>
           {% for analysis in analyses %}
               <div class="result">
                   <strong>Text:</strong> {{ analysis.text }}<br>
                   <strong>Sentiment:</strong> {{ analysis.sentiment }} (Score: {{ analysis.score|floatformat:2 }})<br>
                   <small>{{ analysis.created_at }}</small>
               </div>
           {% endfor %}
       </div>
   </body>
   </html>
   ```

4. **配置 URL** (`ai_app/urls.py`)：
   ```python
   from django.urls import path
   from . import views

   urlpatterns = [
       path('chat/', views.chat_view, name='chat_view'),
       path('sentiment/', views.sentiment_view, name='sentiment_view'),
   ]
   ```

5. **測試**：
   - 運行 `python manage.py runserver`。
   - 訪問 `http://127.0.0.1:8000/ai/sentiment/`，輸入文本（如 "I love this product!"）並檢查情感結果。

### 說明
- **功能**：用戶輸入文本，後端使用 Hugging Face 的情感分析模型判斷情感，儲存結果並顯示歷史記錄。
- **性能**：首次載入模型可能較慢，可考慮預載或使用快取。
- **擴展**：可支援其他 NLP 任務（如文本分類、命名實體識別）。

---

## 6. 進階技巧與最佳實踐

### 技巧 1：非同步 API 呼叫
- 使用 `httpx` 實現非同步請求，減少視圖的阻塞時間。
  ```python
  import httpx
  from django.shortcuts import render
  import asyncio

  async def async_chat_view(request):
      if request.method == 'POST':
          user_input = request.POST.get('user_input')
          async with httpx.AsyncClient() as client:
              response = await client.post(
                  'https://api.x.ai/grok',
                  json={'prompt': user_input, 'max_tokens': 100},
                  headers={'Authorization': f'Bearer {settings.XAI_API_KEY}'}
              )
          ai_response = response.json().get('response', 'Error') if response.status_code == 200 else 'Error'
          ChatMessage.objects.create(user_input=user_input, ai_response=ai_response)
          return render(request, 'ai_app/chat.html', {
              'user_input': user_input,
              'ai_response': ai_response,
              'messages': ChatMessage.objects.all()
          })
      return render(request, 'ai_app/chat.html', {'messages': ChatMessage.objects.all()})
  ```
  - **注意**：需使用非同步伺服器（如 `uvicorn`）運行 Django：
    ```bash
    pip install uvicorn
    uvicorn ai_project.asgi:application
    ```

### 技巧 2：模型快取與預載
- 為 Hugging Face 模型實現單例模式，避免重複載入。
  ```python
  from transformers import pipeline

  class ModelSingleton:
      _instance = None
      def __new__(cls):
          if cls._instance is None:
              cls._instance = super().__new__(cls)
              cls._instance.model = pipeline('sentiment-analysis')
          return cls._instance

  def sentiment_view(request):
      analyzer = ModelSingleton().model
      if request.method == 'POST':
          text = request.POST.get('text')
          result = analyzer(text)[0]
          # ... 後續邏輯
  ```

### 技巧 3：結果快取
- 使用 Django 的快取框架儲存 AI 結果，減少 API 呼叫。
  ```python
  from django.core.cache import cache

  def chat_view(request):
      if request.method == 'POST':
          user_input = request.POST.get('user_input')
          cache_key = f'ai_response_{user_input}'
          ai_response = cache.get(cache_key)
          
          if not ai_response:
              response = requests.post(
                  'https://api.x.ai/grok',
                  json={'prompt': user_input, 'max_tokens': 100},
                  headers={'Authorization': f'Bearer {settings.XAI_API_KEY}'}
              )
              ai_response = response.json().get('response', 'Error') if response.status_code == 200 else 'Error'
              cache.set(cache_key, ai_response, timeout=3600)  # 快取 1 小時
          
          ChatMessage.objects.create(user_input=user_input, ai_response=ai_response)
          # ... 後續邏輯
  ```

### 最佳實踐
- **安全儲存金鑰**：始終使用環境變數，避免將 API 金鑰硬編碼。
- **錯誤處理**：為 API 呼叫添加異常處理，防止服務中斷。
  ```python
  try:
      response = requests.post('https://api.x.ai/grok', json=data, headers=headers)
      response.raise_for_status()
  except requests.RequestException as e:
      logger.error(f"API error: {str(e)}")
      return HttpResponseServerError("AI service unavailable")
  ```
- **限制請求頻率**：實現速率限制，防止 API 濫用。
- **日誌記錄**：記錄 AI 請求與回應，方便調試與監控。
- **模組化**：將 AI 邏輯封裝到服務層（如 `services.py`），保持視圖簡潔。

---

## 7. 常見問題與解決方案

### 問題 1：API 呼叫失敗
**症狀**：收到 403 或 500 錯誤。
**解決方案**：
- 檢查 API 金鑰是否正確（`settings.XAI_API_KEY`）。
- 確保網路連線正常，檢查 API 端點 URL。
- 查看 API 文件，確認請求格式與參數。

### 問題 2：模型載入過慢
**症狀**：Hugging Face 模型首次運行耗時長。
**解決方案**：
- 使用單例模式預載模型（見技巧 2）。
- 選擇較小的模型（如 `distilbert-base-uncased`）。
- 部署到 GPU 伺服器，加速推理。

### 問題 3：記憶體使用過高
**症狀**：本地模型導致伺服器崩潰。
**解決方案**：
- 使用較小的模型或量化模型（`transformers` 支援 4-bit 量化）。
- 將模型推理外包給專用服務（如 Hugging Face Inference API）。
- 增加伺服器記憶體或使用雲端服務。

---

## 8. 學習資源與練習建議

### 推薦資源
- **xAI API 文件**：https://x.ai/api，詳細說明 Grok API 的用法。
- **Hugging Face 文檔**：https://huggingface.co/docs/transformers，涵蓋模型與 pipeline。
- **書籍**：*Python Machine Learning* by Sebastian Raschka，介紹 NLP 基礎。
- **線上課程**：如 Coursera 的 NLP 課程或 Fast.ai 的深度學習教程。
- **社群**：Hugging Face 論壇、Reddit 的 r/MachineLearning。

### 練習建議
1. **基礎練習**：擴展聊天功能，支援多輪對話（儲存上下文）。
2. **進階挑戰**：實現一個文章摘要生成器，使用 Hugging Face 的 `summarization` pipeline。
3. **專案實戰**：開發一個產品評論分析系統，結合情感分析與圖表視覺化（使用 Chart.js）。
4. **性能優化**：為聊天功能添加快取與非同步請求，比較性能差異。
5. **探索其他模型**：嘗試 Hugging Face 的其他任務（如問答、翻譯）。

---

## 總結
- **Django 與 AI 整合** 為 Web 應用增添強大功能，適合聊天機器人、情感分析等場景。
- **關鍵技能**：掌握 API 呼叫、本地模型部署、錯誤處理與性能優化。
- **持續學習**：透過實作專案與探索新模型（如 xAI 的進階功能），提升 AI 應用能力。