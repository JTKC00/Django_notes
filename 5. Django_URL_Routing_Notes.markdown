# Django URL 路由詳細筆記

## 1. 簡介
Django URL 路由是 Django 網頁框架的核心組成部分，負責將 URL 映射到對應的視圖。它允許開發者定義乾淨、結構化且易於維護的 URL 模式，確保應用程式能高效處理 HTTP 請求。本筆記提供了一個全面的指南，幫助您理解並掌握 Django URL 路由，涵蓋其核心概念、功能和最佳實踐。

## 2. URL 路由基本概念
- **URL 分發器**：Django 的 URL 路由系統，通常被稱為 URL 分發器，根據項目中定義的 URL 模式，將接收到的 HTTP 請求匹配到適當的視圖函數或類。
- **URL 模式**：這些模式定義在項目或各應用程式的 `urls.py` 文件中。每個模式將一個 URL 映射到特定的視圖。
- **視圖**：一個 Python 函數或類，用於處理 HTTP 請求並返回 HTTP 響應。

## 3. 定義 URL 模式
- **語法**：URL 模式使用 Django 的 `path()` 或 `re_path()` 函數來定義。
  - `path()`：用於簡單的 URL 模式，搭配路徑轉換器。
  - `re_path()`：用於更複雜的模式，搭配正則表達式。
- **範例**：
  ```python
  from django.urls import path
  from . import views

  urlpatterns = [
      path('hello/', views.hello_world),
      path('book/<int:book_id>/', views.book_detail),
  ]
  ```
- **路徑轉換器**：內建的轉換器如 `int`、`str`、`slug`、`uuid` 和 `path`，用於從 URL 中捕獲部分內容並作為參數傳遞給視圖。
  - 範例：`<int:book_id>` 捕獲 URL 中的整數並將其作為 `book_id` 傳遞給視圖。

## 4. 命名 URL 模式
- **目的**：為 URL 模式指定名稱，便於在模板、視圖和其他應用程式部分中引用。
- **語法**：在 `path()` 函數中使用 `name` 參數。
  - 範例：`path('book/<int:book_id>/', views.book_detail, name='book_detail')`
- **用法**：
  - 在模板中：`{% url 'book_detail' book_id=1 %}`
  - 在視圖中：`reverse('book_detail', args=[1])`

## 5. 包含其他 URL 配置
- **目的**：跨多個應用程式或模組組織 URL 模式。
- **語法**：使用 `include()` 函數。
  - 範例：
    ```python
    from django.urls import include, path

    urlpatterns = [
        path('blog/', include('blog.urls')),
    ]
    ```
- **最佳實踐**：每個應用程式應有自己的 `urls.py` 文件，並在項目的主 `urls.py` 中包含。

## 6. URL 參數與路徑轉換器
- **捕獲參數**：使用尖括號 `< >` 捕獲 URL 參數。
  - 範例：`<int:year>/<str:month>/`
- **自定義路徑轉換器**：開發者可為特定模式定義自訂轉換器。
  - 範例：用於四位數年份的轉換器。
- **正則表達式**：對於更複雜的模式，使用 `re_path()` 搭配正則表達式。
  - 範例：`re_path(r'^articles/(?P<year>[0-9]{4})/$', views.articles_by_year)`

## 7. URL 命名空間
- **目的**：避免應用程式之間的名稱衝突。
- **語法**：在 `include()` 中使用 `namespace` 參數。
  - 範例：`path('blog/', include('blog.urls', namespace='blog'))`
- **用法**：使用命名空間引用命名 URL，例如 `{% url 'blog:article_detail' article_id=1 %}`

## 8. URL 路由最佳實踐
- **保持 URL 乾淨且易讀**：使用有意義的名稱，避免不必要的參數。
- **使用命名 URL**：始終為 URL 模式命名，以便輕鬆引用。
- **使用包含組織**：將 URL 配置分散到各應用程式中，以提高可維護性。
- **避免硬編碼 URL**：在視圖中使用 `reverse()`，在模板中使用 `{% url %}` 動態生成 URL。
- **處理 404 錯誤**：在主 `urls.py` 中定義自訂 404 視圖。

## 9. 高級主題
- **類視圖在 URL 中**：使用 `as_view()` 映射類視圖。
  - 範例：`path('hello/', HelloWorldView.as_view())`
- **URL 模式繼承**：使用 `include()` 和應用程式特定的 `urls.py` 繼承模式。
- **反向 URL 解析**：使用 `reverse()` 根據視圖名稱和參數動態生成 URL。

## 10. 結論
Django URL 路由是一個強大且靈活的系統，使開發者能夠創建乾淨、可維護且可擴展的網頁應用程式。通過掌握 URL 模式、命名 URL 和最佳實踐，開發者可以確保應用程式結構良好且易於導航。本筆記為初學者提供了一個堅實的基礎，讓他們能有效地開始使用 Django URL 路由。