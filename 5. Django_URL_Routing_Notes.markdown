# Django URL 路由詳細筆記

## 1. 簡介
Django URL 路由是 Django 網頁框架的核心組成部分，負責將 URL 映射到對應的視圖。它允許開發者定義乾淨、結構化且易於維護的 URL 模式，確保應用程式能高效處理 HTTP 請求。本筆記提供了一個全面的指南，幫助您理解並掌握 Django URL 路由，涵蓋其核心概念、功能和最佳實踐。

## 2. URL 路由基本概念
- **URL 分發器**：Django 的 URL 路由系統，通常被稱為 URL 分發器，根據項目中定義的 URL 模式，將接收到的 HTTP 請求匹配到適當的視圖函數或類。
- **URL 模式**：這些模式定義在項目或各應用程式的 `urls.py` 文件中。每個模式將一個 URL 映射到特定的視圖。
- **視圖**：一個 Python 函數或類，用於處理 HTTP 請求並返回 HTTP 響應。

## 3. 定義 URL 模式
- **語法**：URL 模式使用 Django 的 `path()` 或 `re_path()` 函數來定義。
  - `path()`：用於簡單的 URL 模式，搭配路徑轉換器。
  - `re_path()`：用於更複雜的模式，搭配正則表達式。
- **範例**：
  ```python
  from django.urls import path
  from . import views

  urlpatterns = [
      path('hello/', views.hello_world),
      path('book/<int:book_id>/', views.book_detail),
  ]
  ```
- **路徑轉換器**：內建的轉換器如 `int`、`str`、`slug`、`uuid` 和 `path`，用於從 URL 中捕獲部分內容並作為參數傳遞給視圖。
  - 範例：`<int:book_id>` 捕獲 URL 中的整數並將其作為 `book_id` 傳遞給視圖。

## 4. 命名 URL 模式
- **目的**：為 URL 模式指定名稱，便於在模板、視圖和其他應用程式部分中引用。
- **語法**：在 `path()` 函數中使用 `name` 參數。
  - 範例：`path('book/<int:book_id>/', views.book_detail, name='book_detail')`
- **用法**：
  - 在模板中：`{% url 'book_detail' book_id=1 %}`
  - 在視圖中：`reverse('book_detail', args=[1])`

## 5. 包含其他 URL 配置
- **目的**：跨多個應用程式或模組組織 URL 模式。
- **語法**：使用 `include()` 函數。
  - 範例：
    ```python
    from django.urls import include, path

    urlpatterns = [
        path('blog/', include('blog.urls')),
    ]
    ```
- **最佳實踐**：每個應用程式應有自己的 `urls.py` 文件，並在項目的主 `urls.py` 中包含。


## 6. URL 參數、路徑轉換器與查詢參數
- **捕獲參數**：使用尖括號 `< >` 捕獲 URL 路徑中的參數。
  - 範例：`<int:year>/<str:month>/`
- **自定義路徑轉換器**：開發者可為特定模式定義自訂轉換器。
  - 範例：用於四位數年份的轉換器。
- **正則表達式**：對於更複雜的模式，使用 `re_path()` 搭配正則表達式。
  - 範例：`re_path(r'^articles/(?P<year>[0-9]{4})/$', views.articles_by_year)`

### RESTful 路徑參數與查詢參數
- **路徑參數**：常見於 RESTful API，例如 `/resources/<int:id>/`，直接在 URL 路徑中指定資源。
  - 範例：`/books/123/` 會由 `path('books/<int:book_id>/', ...)` 捕獲 `book_id=123`。
- **查詢參數（Query Params）**：以 `?key=value` 形式出現在 URL 結尾，常用於過濾、搜尋、分頁等。
  - 範例：`/resources/query/?type=pdf&page=2`
  - Django 取得查詢參數：`request.GET.get('type')`、`request.GET.get('page')`

#### 綜合範例
假設有一個 API 路徑 `/resources/query/<str:category>/`，同時支援查詢參數：
```python
from django.urls import path
from . import views

urlpatterns = [
    path('resources/query/<str:category>/', views.resource_query, name='resource_query'),
]
```
對應視圖：
```python
def resource_query(request, category):
    filetype = request.GET.get('type')
    page = request.GET.get('page', 1)
    # category 來自路徑, filetype/page 來自查詢參數
    ...
```
呼叫範例：
```
/resources/query/book/?type=pdf&page=2
```
> **說明：**
> - 路徑參數適合標識資源主體（如 id、分類），查詢參數適合過濾、排序、分頁等附加條件。


## 7. URL 命名空間（namespace）教學

### 不用 namespace 的情況
如果沒有使用 namespace，app 的 `urls.py` 不設 `app_name`，主專案的 `urls.py` 也不指定 `namespace`：

**blog/urls.py**
```python
from django.urls import path
from . import views

urlpatterns = [
    path('article/<int:article_id>/', views.article_detail, name='article_detail'),
]
```

**project/urls.py**
```python
from django.urls import path, include

urlpatterns = [
    path('blog/', include('blog.urls')),
]
```

**模板或反向解析**
```django
{% url 'article_detail' article_id=1 %}
```
```python
from django.urls import reverse
url = reverse('article_detail', args=[1])
```

> **缺點**：如果多個 app 都有 `article_detail` 這個 name，會發生名稱衝突，Django 只會解析到第一個註冊的。

---

### 使用 namespace 的情況
使用 namespace 可避免名稱衝突，推薦用於多 app 專案。

1. **在 app 的 `urls.py` 中設置 `app_name`**：
   ```python
   # blog/urls.py
   from django.urls import path
   from . import views

   app_name = 'blog'

   urlpatterns = [
       path('article/<int:article_id>/', views.article_detail, name='article_detail'),
   ]
   ```

2. **在主專案的 `urls.py` 中 include 並指定 namespace**：
   ```python
   # project/urls.py
   from django.urls import path, include

   urlpatterns = [
       path('blog/', include('blog.urls', namespace='blog')),
   ]
   ```

3. **在模板中使用命名空間呼叫 URL**：
   ```django
   {% url 'blog:article_detail' article_id=1 %}
   ```

4. **在視圖或其他地方反向解析**：
   ```python
   from django.urls import reverse
   url = reverse('blog:article_detail', args=[1])
   ```

> **補充說明：**
> - `app_name` 必須設在 app 的 `urls.py`，否則 namespace 會報錯。
> - 使用命名空間可讓大型專案的 URL 管理更清晰。

## 8. URL 路由最佳實踐
- **保持 URL 乾淨且易讀**：使用有意義的名稱，避免不必要的參數。
- **使用命名 URL**：始終為 URL 模式命名，以便輕鬆引用。
- **使用包含組織**：將 URL 配置分散到各應用程式中，以提高可維護性。
- **避免硬編碼 URL**：在視圖中使用 `reverse()`，在模板中使用 `{% url %}` 動態生成 URL。
- **處理 404 錯誤**：在主 `urls.py` 中定義自訂 404 視圖。

## 9. 高級主題
- **類視圖在 URL 中**：使用 `as_view()` 映射類視圖。
  - 範例：`path('hello/', HelloWorldView.as_view())`
- **URL 模式繼承**：使用 `include()` 和應用程式特定的 `urls.py` 繼承模式。
- **反向 URL 解析**：使用 `reverse()` 根據視圖名稱和參數動態生成 URL。

## 10. 結論
Django URL 路由是一個強大且靈活的系統，使開發者能夠創建乾淨、可維護且可擴展的網頁應用程式。通過掌握 URL 模式、命名 URL 和最佳實踐，開發者可以確保應用程式結構良好且易於導航。本筆記為初學者提供了一個堅實的基礎，讓他們能有效地開始使用 Django URL 路由。